  StringAdapter.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xutility(2440): error C4996: 'std::copy::_Unchecked_iterators::_Deprecate': Call to 'std::copy' with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.13.26128\include\xutility(2440): note: see declaration of 'std::copy::_Unchecked_iterators::_Deprecate'
  c:\users\anshu\downloads\boost_1_64_0\boost\algorithm\string\detail\classification.hpp(102): note: see reference to function template instantiation '_OutIt *std::copy<std::_String_const_iterator<std::_String_val<std::_Simple_types<_Ty>>>,char*>(_InIt,_InIt,_OutIt)' being compiled
          with
          [
              _OutIt=char *,
              _Ty=char,
              _InIt=std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>
          ]
  c:\users\anshu\downloads\boost_1_64_0\boost\algorithm\string\classification.hpp(206): note: see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<_Ty>>>>>(const RangeT &)' being compiled
          with
          [
              _Ty=char,
              RangeT=boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
          ]
  c:\users\anshu\downloads\boost_1_64_0\boost\algorithm\string\classification.hpp(206): note: see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<_Ty>>>>>(const RangeT &)' being compiled
          with
          [
              _Ty=char,
              RangeT=boost::iterator_range<std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>>
          ]
  c:\users\anshu\documents\github\design patterns\structural\stringadapter\stringadapter\stringadapter.cpp(24): note: see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<char> boost::algorithm::is_any_of<std::string>(const RangeT &)' being compiled
          with
          [
              RangeT=std::string
          ]
